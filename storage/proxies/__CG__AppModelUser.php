<?php

namespace DoctrineProxies\__CG__\App\Model;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Model\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }



    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'email', 'emailVerifiedAt', 'password', 'rememberToken', 'roles', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'deletedBy', 'updatedBy', 'accessToken'];
        }

        return ['__isInitialized__', 'id', 'email', 'emailVerifiedAt', 'password', 'rememberToken', 'roles', 'createdAt', 'updatedAt', 'deletedAt', 'createdBy', 'deletedBy', 'updatedBy', 'accessToken'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getModelValidationRules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModelValidationRules', []);

        return parent::getModelValidationRules();
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole(string $code): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$code]);

        return parent::hasRole($code);
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmailVerifiedAt($emailVerifiedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmailVerifiedAt', [$emailVerifiedAt]);

        return parent::setEmailVerifiedAt($emailVerifiedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailVerifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailVerifiedAt', []);

        return parent::getEmailVerifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setRememberToken($rememberToken = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRememberToken', [$rememberToken]);

        return parent::setRememberToken($rememberToken);
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberToken()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberToken', []);

        return parent::getRememberToken();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\ItAces\ORM\Entities\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\ItAces\ORM\Entities\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrimary()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrimary', []);

        return parent::getPrimary();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedBy(\ItAces\ORM\Entities\EntityBase $createdBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedBy', [$createdBy]);

        return parent::setCreatedBy($createdBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedBy', []);

        return parent::getCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedBy(\ItAces\ORM\Entities\EntityBase $deletedBy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedBy', [$deletedBy]);

        return parent::setDeletedBy($deletedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedBy', []);

        return parent::getDeletedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedBy(\ItAces\ORM\Entities\EntityBase $updatedBy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedBy', [$updatedBy]);

        return parent::setUpdatedBy($updatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedBy', []);

        return parent::getUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt($deletedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function onBeforeAdd(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onBeforeAdd', [$event]);

        return parent::onBeforeAdd($event);
    }

    /**
     * {@inheritDoc}
     */
    public function onAfterAdd(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onAfterAdd', [$event]);

        return parent::onAfterAdd($event);
    }

    /**
     * {@inheritDoc}
     */
    public function onBeforeUpdate(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onBeforeUpdate', [$event]);

        return parent::onBeforeUpdate($event);
    }

    /**
     * {@inheritDoc}
     */
    public function onAfterUpdate(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onAfterUpdate', [$event]);

        return parent::onAfterUpdate($event);
    }

    /**
     * {@inheritDoc}
     */
    public function onBeforeDelete(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onBeforeDelete', [$event]);

        return parent::onBeforeDelete($event);
    }

    /**
     * {@inheritDoc}
     */
    public function onAfterDelete(\Doctrine\Common\Persistence\Event\LifecycleEventArgs $event)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onAfterDelete', [$event]);

        return parent::onAfterDelete($event);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForPasswordReset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForPasswordReset', []);

        return parent::getEmailForPasswordReset();
    }

    /**
     * {@inheritDoc}
     */
    public function sendPasswordResetNotification($token)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendPasswordResetNotification', [$token]);

        return parent::sendPasswordResetNotification($token);
    }

    /**
     * {@inheritDoc}
     */
    public function can($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'can', [$abilities, $arguments]);

        return parent::can($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cant($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cant', [$abilities, $arguments]);

        return parent::cant($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function cannot($abilities, $arguments = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'cannot', [$abilities, $arguments]);

        return parent::cannot($abilities, $arguments);
    }

    /**
     * {@inheritDoc}
     */
    public function getKey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getKey', []);

        return parent::getKey();
    }

    /**
     * {@inheritDoc}
     */
    public function notifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifications', []);

        return parent::notifications();
    }

    /**
     * {@inheritDoc}
     */
    public function readNotifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'readNotifications', []);

        return parent::readNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function unreadNotifications()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unreadNotifications', []);

        return parent::unreadNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function notify($instance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notify', [$instance]);

        return parent::notify($instance);
    }

    /**
     * {@inheritDoc}
     */
    public function notifyNow($instance, array $channels = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'notifyNow', [$instance, $channels]);

        return parent::notifyNow($instance, $channels);
    }

    /**
     * {@inheritDoc}
     */
    public function routeNotificationFor($driver, $notification = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'routeNotificationFor', [$driver, $notification]);

        return parent::routeNotificationFor($driver, $notification);
    }

    /**
     * {@inheritDoc}
     */
    public function hasVerifiedEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasVerifiedEmail', []);

        return parent::hasVerifiedEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function markEmailAsVerified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'markEmailAsVerified', []);

        return parent::markEmailAsVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function sendEmailVerificationNotification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'sendEmailVerificationNotification', []);

        return parent::sendEmailVerificationNotification();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailForVerification()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailForVerification', []);

        return parent::getEmailForVerification();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifierName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifierName', []);

        return parent::getAuthIdentifierName();
    }

    /**
     * {@inheritDoc}
     */
    public function getRememberTokenName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRememberTokenName', []);

        return parent::getRememberTokenName();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthIdentifier()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthIdentifier', []);

        return parent::getAuthIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthPassword', []);

        return parent::getAuthPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function findForPassport($userIdentifier)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'findForPassport', [$userIdentifier]);

        return parent::findForPassport($userIdentifier);
    }

    /**
     * {@inheritDoc}
     */
    public function clients()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clients', []);

        return parent::clients();
    }

    /**
     * {@inheritDoc}
     */
    public function tokens()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'tokens', []);

        return parent::tokens();
    }

    /**
     * {@inheritDoc}
     */
    public function token()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'token', []);

        return parent::token();
    }

    /**
     * {@inheritDoc}
     */
    public function tokenCan($scope)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'tokenCan', [$scope]);

        return parent::tokenCan($scope);
    }

    /**
     * {@inheritDoc}
     */
    public function createToken($name, array $scopes = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createToken', [$name, $scopes]);

        return parent::createToken($name, $scopes);
    }

    /**
     * {@inheritDoc}
     */
    public function withAccessToken($accessToken)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'withAccessToken', [$accessToken]);

        return parent::withAccessToken($accessToken);
    }

}
